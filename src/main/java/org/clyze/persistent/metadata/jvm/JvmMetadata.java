package org.clyze.persistent.metadata.jvm;

import java.util.*;

import com.fasterxml.jackson.core.JsonProcessingException;
import org.clyze.persistent.metadata.JSONUtil;
import org.clyze.persistent.model.Function;
import org.clyze.persistent.model.SymbolWithId;
import org.clyze.persistent.model.Type;
import org.clyze.persistent.model.Usage;
import org.clyze.persistent.model.jvm.*;

/**
 * A class providing a common container of basic Doop metadata.
 *
 * The metadata is generated by processing some form of a
 * syntactic representation (e.g. Java source file, Jimple IR).
 */
public class JvmMetadata {
    public final Set<JvmClass> jvmClasses = new HashSet<>();
    public final Set<JvmField> jvmFields = new HashSet<>();
    public final Set<JvmMethod> jvmMethods = new HashSet<>();
    public final Set<JvmVariable> jvmVariables = new HashSet<>();
    public final Set<JvmMethodInvocation> jvmInvocations = new HashSet<>();
    public final Set<JvmHeapAllocation> jvmHeapAllocations = new HashSet<>();
    public final Set<Usage> usages = new HashSet<>();
    public final Set<JvmStringConstant> jvmStringConstants = new HashSet<>();

    /**
     * Return a metadata collection sorted by id, to make output canonical.
     * @param set    the collection of elements (that have unique ids)
     * @param <T>    the actual type of the set elements
     * @return       the sorted output list
     */
    public static <T extends SymbolWithId> List<T> getSortedBySymbolId(Set<T> set) {
        List<T> ret = new ArrayList<>(set);
        ret.sort(Comparator.comparing(SymbolWithId::getSymbolId));
        return ret;
    }

    /**
     * Create a JVM metadata object from a map representation for JSON data.
     * @param  map the map to use
     * @return the deserialized JVM metadata object
     */
    @SuppressWarnings("unchecked")
    public static JvmMetadata fromMap(Map<String, Object> map) throws JsonProcessingException {
        JvmMetadata metadata = new JvmMetadata();
        metadata.jvmClasses.addAll((List<JvmClass>) map.get(JvmClass.class.getSimpleName()));
        metadata.jvmFields.addAll((List<JvmField>) map.get(JvmField.class.getSimpleName()));
        metadata.jvmMethods.addAll((List<JvmMethod>) map.get(JvmMethod.class.getSimpleName()));
        metadata.jvmVariables.addAll((List<JvmVariable>) map.get(JvmVariable.class.getSimpleName()));
        metadata.jvmInvocations.addAll((List<JvmMethodInvocation>) map.get(JvmMethodInvocation.class.getSimpleName()));
        metadata.jvmHeapAllocations.addAll((List<JvmHeapAllocation>) map.get(JvmHeapAllocation.class.getSimpleName()));
        metadata.usages.addAll((List<Usage>) map.get(Usage.class.getSimpleName()));
        metadata.jvmStringConstants.addAll((List<JvmStringConstant>) map.get(JvmStringConstant.class.getSimpleName()));
        return metadata;
    }
}
